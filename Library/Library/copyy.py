import json
import os
from datetime import datetime, timedelta
import aiofiles
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import asyncio
from zoneinfo import ZoneInfo
from playwright.async_api import async_playwright


async def weather(user_id, days_count=1):
    user_file_path = f'{json_folder}/user_data.json'
    city_file_path = f'{json_folder}/city_data.json'
    async with aiofiles.open(user_file_path, 'r', encoding='utf-8') as f:
        content = await f.read()
        user_data = json.loads(content)
        city = user_data.get(str(user_id))
    if not city:
        return "–í—ã –µ—â—ë –Ω–µ —Å–∫–∞–∑–∞–ª–∏, –≥–¥–µ –∂–∏–≤—ë—Ç–µ! –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É üêæ"
    city_url = normalize_city(city)
    days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    now = datetime.now()

    try:
        async with aiofiles.open(city_file_path, 'r', encoding='utf-8') as f:
            content = await f.read()
            if content.strip():
                city_data = json.loads(content)
            else:
                city_data = {}
    except FileNotFoundError:
        city_data = {}

    if city not in city_data:
        city_data[city] = {}

    result = ""
    dates_needed_from_site = []

    needed_dates = []
    for offset in range(days_count):
        current_day = now + timedelta(days=offset)
        weekday = days[current_day.weekday()].capitalize()
        day_str = str(int(current_day.strftime('%d')))
        date_key = f"{weekday} {day_str}"
        needed_dates.append(date_key)

        if date_key in city_data[city]:
            min_temp = city_data[city][date_key]["min"]
            max_temp = city_data[city][date_key]["max"]
            result += f"{date_key}\nüå° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è (–Ω–æ—á—å): {min_temp}\nüå° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è (–¥–µ–Ω—å): {max_temp}\n\n"
        else:
            dates_needed_from_site.append(date_key)

    if not dates_needed_from_site:
        return f"‡¥¶‡µç‡¥¶‡¥ø/·ê† - ‚©ä -„Éû\n\n{result.strip()}"

    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False)
        page = await browser.new_page(user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36")

        try:
            await page.goto(f"https://sinoptik.ua/ru/pohoda/{city_url}/10-dniv", timeout=90000)
            await asyncio.sleep(3)
        except Exception as e:
            await browser.close()
            print (f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {str(e)}")
            return "–ö–æ—Ç–∏–∫–∞–º –±—ã–ª–æ –ª–µ–Ω—å –∏–∑—É—á–∞—Ç—å –ø–æ–≥–æ–¥—É!"

        for date in dates_needed_from_site:
            if date in city_data[city]:
                min_temp = city_data[city][date]["min"]
                max_temp = city_data[city][date]["max"]
            else:
                try:
                    day_link = await page.get_by_role("link", name=date).nth(0).inner_text()
                    day_text = day_link.split('\n')
                    min_temp = day_text[8] if len(day_text) > 8 else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    max_temp = day_text[12] if len(day_text) > 12 else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {date}: {e}")
                    return "–ö–æ—Ç–∏–∫–∏ –Ω–µ –ø–æ–Ω–∏–º–∞—é—Ç —Ä–∞–±–æ—Ç—É —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞..?"

                city_data[city][date] = {"min": min_temp, "max": max_temp}

            result += f"{date}\nüå° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è (–Ω–æ—á—å): {min_temp}\nüå° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è (–¥–µ–Ω—å): {max_temp}\n\n"

        await browser.close()

        async with aiofiles.open(city_file_path, 'w', encoding='utf-8') as f:
            await f.write(json.dumps(city_data, indent=2, ensure_ascii=False))

        print("–ü–æ–≥–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ json")
        return f"‡¥¶‡µç‡¥¶‡¥ø/·ê† - ‚©ä -„Éû\n\n{result.strip()}"

@dp.message(Command("cat_sinoptik"))
async def cmd_weather(message: Message, state: FSMContext):
    weather_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–≥–æ–¥–∞ –Ω–∞ –¥–µ–Ω—å")],
            [KeyboardButton(text="–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é")],
            [KeyboardButton(text="–ü–æ–≥–æ–¥–∞ –Ω–∞ 10 –¥–Ω–µ–π")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ö–∞–∫ –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —É–ª–∏—á–Ω—ã—Ö –∫–æ—Ç–∏–∫–æ–≤?", reply_markup=weather_kb)
    await state.set_state(Form.waiting_for_weather_choice)

@dp.message(Form.waiting_for_weather_choice)
async def weather_choice(message: Message, state: FSMContext):
    choice = message.text
    await state.clear()
    wait = await message.answer ("–°–ª—É—à–∞—é —à—ë–ø–æ—Ç –∫–æ—Ç–∏–∫–æ–≤...\n/·ê† - Àï -„Éû ‚≥ä", reply_markup=ReplyKeyboardRemove())
    try:
        if choice == "–ü–æ–≥–æ–¥–∞ –Ω–∞ –¥–µ–Ω—å":
            info = await weather(message.from_user.id, days_count=1)
        elif choice == "–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é":
            info = await weather(message.from_user.id, days_count=7)
        elif choice == "–ü–æ–≥–æ–¥–∞ –Ω–∞ 10 –¥–Ω–µ–π":
            info = await weather(message.from_user.id, days_count=10)
        else:
            info = "–ö–æ—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞—é—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã..."
        await wait.delete()
        await message.answer(info)
    except Exception as e:
        await message.answer("–£–ª–∏—á–Ω—ã–µ –∫–æ—Ç–∏–∫–∏ –ø–æ–∫–∞ —Å–ø—è—Ç")
        print(f"[{time(message.date)}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {str(e)}")

